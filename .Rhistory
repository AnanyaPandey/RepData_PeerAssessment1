getwd()
ls()
dir()
x <- rnorm(100, mean = 5, sd = 2 )
y <- rnorm(100, mean = 50, sd = 5 )
plot(y,x)
plot(x,y)
quit()
demo()
q()
library(KernSmooth)
library(swirl)
install_from_swirl("statistical_inference")
install_from_swirl("Statistical Inference")
library(swirl)
swirl()
library(rstats)
install.packages("rstats", ddependencies = T)
install.packages("sjPlot", ddependencies = T)
install.packages("sjPlot", ddependencies = T)
install.packages("sjPlot", dependencies = T)
swirl()
library(swirl)
swirl()
1/36
3/36 - 1
2/36
(2+1-1)/36
info()
skip()
deck
52
4/52
0
1/12
12/52
2/51
library(swirl)
swirl()
.24
.64
.64
mypdf
integrate(mypdf, lower = 0, upper = 1.6)
.32
1.414
1.4
skip()
p = .7
ln
ln()
log
log(p)
plot(log(p))
plot(log(p/(1--p)))
log(p/(1-p))
seq(0,1)
seq(0,1, by = 100)
seq(0,1, with = 100)
str(seq)
seq
x <- rnorm(100)
plot(log(x))
spline
spline(log(p))
seq(0,1, by = 100)
seq(0,1, by = 1000)
seq(0,1, by = 1/100)
seq(0,1, by = 1/1000)
x <- seq(0,1, by = 1/1000)
plot(log(x))
plot(log(x/(1-x)))
library(datasets)
download.file("https://archive.ics.uci.edu/ml/machine-learning-databases/00275/Bike-Sharing-Dataset.zip", "Bikedata.zip")
download.file("https://archive.ics.uci.edu/ml/machine-learning-databases/00275/Bike-Sharing-Dataset.zip", Bikedata.zip)
sessionInfo()
install.packages("Cacher")
install.packages("Cacher")
install.packages("Cachepackage")
install.packages("cachepackage")
install.packages("cacher")
install.packages("cacher")
citation()
clear
getwd()
setwd("E:/Assignment/RepData_PeerAssessment1")
ls
ls()
getwd()
dir()
dir()
temp<- tempfile()
temp <- read.csv("activity.csv")
head(temp)
stepbyday <- aggregate(steps ~ date, date, sum)
stepbyday <- aggregate(steps ~ date, temp, sum)
stepbyday
stepbyday <- aggregate(steps ~ date, temp, sum, na.rm = TRUE)
stepbyday <- aggregate(steps ~ date, temp, FUN=sum, na.rm = TRUE)
stepbyday
stepbyday <- aggregate(temp, by=list(steps,date), FUN=sum, na.rm = TRUE)
stepbyday <- aggregate(temp, by=list(date,steps), FUN=sum, na.rm = TRUE)
stepbyday <- aggregate(steps ~ date, temp, FUN=sum, na.rm = TRUE)
testing <- aggregate(temp, by = date, FUN=sum)
testing <- aggregate(temp, by = list(date), FUN=sum)
testing <- aggregate(temp, by = list(date,steps), FUN=sum)
testing <- aggregate(temp, by = list(date), FUN=sum)
temp
head(tmep)
head(temp)
head(temp$steps)
agg <- aggregate(temp, list(steps = temp$steps), Sum)
agg <- aggregate(temp, list(steps = temp$steps), FUN=sum)
agg <- aggregate(temp$steps, by=list(date = temp$date), FUN=sum)
aggg
agg
agg <- aggregate(temp$steps, by=list(date = temp$date), FUN=sum, na.rm=TRUE)
agg
agg <- aggregate(temp$steps, by=list(date = temp$date), FUN=sum, na.rm=TRUE)
steps_by_day <- aggregate(steps ~ date, temp, sum)
diff(agg,steps_by_day)
head(steps_by_day)
head(agg)
agg <- aggregate(temp$steps, by=list(date = temp$date), FUN=sum, na.rm=TRUE)
names(agg) <- c("Date","Total Steps")
agg
head(agg)
names(agg) <- c("Date","Tota_Steps")
hist(agg$Tota_Steps, main = "Total Steps By Day", col="green", xlab = "Total Steps", ylab="Frequency")
head(temp)
stepsByInterval <- aggregate(data$steps, by = list(Interval = data$Interval), mean, na.rm = TRUE)
data <- read.csv("activity.csv")
stepsByInterval <- aggregate(data$steps, by = list(Interval = data$Interval), mean, na.rm = TRUE)
stepsbyinterval <- aggregate(data$steps, by = list(data$interval),mean)
head(stepsbyinterval)
stepsbyinterval <- aggregate(data$steps, by = list(data$interval),mean, na.rm=TRUE)
stepsbyinterval
stepsbyinterval <- aggregate(data$steps, by = list(Interval = data$interval),mean, na.rm=TRUE)
stepsbyinterval
head(stepsbyinterval)
stepsbyinterval <- aggregate(Steps=data$steps, by = list(data$interval),mean, na.rm=TRUE)
names(stepsbyinterval) <- c("Interval,Average_Steps")
stepsbyinterval
names(stepsbyinterval) <- c("Interval","Average_Steps")
head(stepsbyinterval)
stepsbyinterval[max(stepsbyinterval$Average_Steps)]
max(stepsbyinterval$Average_Steps)
Max_Interval <- stepsbyinterval[which.max(stepsbyinterval$Average_Steps),1]
Max_Interval
steps_by_daynew <- aggregate(steps ~ date, imputed_data, sum)
hist(steps_by_daynew, main = "Total Steps Each Day", col="blue", xlab ="Number of Steps", ylab="Frequency", add = TRUE)
imputed_data <- transform(data, steps = ifelse(is.na(data$steps), stepsbyinterval$Average_Steps[match(data$interval, stepsbyinterval$Interval)], data$steps))
imputed_data[as.character(imputed_data$date) == "2012-10-01", 1] <- 0
steps_by_daynew <- aggregate(steps ~ date, imputed_data, sum)
hist(steps_by_daynew, main = "Total Steps Each Day", col="blue", xlab ="Number of Steps", ylab="Frequency", add = TRUE)
class(steps_by_daynew)
hist(steps_by_daynew$steps, main = "Total Steps Each Day", col="blue", xlab ="Number of Steps", ylab="Frequency", add = TRUE)
legend("topright", c("Imputed", "Non-imputed"), col=c("blue", "green"), lwd=10)
hist(steps_by_daynew$steps, main = "Total Steps Each Day", col="blue", xlab ="Number of Steps", ylab="Frequency", add = TRUE)
dev.off()
hist(steps_by_daynew$steps, main = "Total Steps Each Day", col="blue", xlab ="Number of Steps", ylab="Frequency", add = TRUE)
hist(steps_by_daynew$steps, main = "Total Steps Each Day", col="blue", xlab ="Number of Steps", ylab="Frequency", add = TRUE)
steps_by_daynew
hist(steps_by_daynew$steps)
hist(steps_by_daynew$steps, main = "Total Steps Each Day", col="blue", xlab ="Number of Steps", ylab="Frequency", add = TRUE)
hist(steps_by_daynew$steps, main = "Total Steps Each Day", col="blue", xlab ="Number of Steps", ylab="Frequency", add = TRUE)
legend("topright", c("Imputed", "Non-imputed"), col=c("blue", "green"), lwd=10)
weekdays <- c("Monday", "Tuesday", "Wednesday", "Thursday",
"Friday")
imputed_data$dow = as.factor(ifelse(is.element(weekdays(as.Date(imputed_data$date)),weekdays), "Weekday", "Weekend"))
head(imputed_data)
is.element("weekday", vector)
steobyintervalnew <- aggregate(steps ~ interval + dow, imputed_data, mean)
stepbyintervalnew <- aggregate(steps ~ interval + dow, imputed_data, mean)
install.packages("rmarkdown")
install.packages("rmarkdown")
render
mean
ls()
aggmean
aggmean <- mean(agg$Tota_Steps)
aggmean
rmedian <- median(agg$Tota_Steps)
rmedian
aggmedian <- median(agg$Tota_Steps)
aggmedian
